{"version":3,"sources":["Components/Button.jsx","Components/ImageViewer.jsx","Components/ImageFlipper.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","props","icons","faAngleUp","faAngleRight","faAngleDown","faAngleLeft","state","onClick","icon","className","this","React","Component","ImageViewer","console","log","image","x","y","z","style","flipUp","bind","flipRight","flipDown","flipLeft","transform","setState","buildStyle","buttons","renderButtons","class","src","ImageFlipper","onChange","e","preventDefault","reader","FileReader","file","target","files","onloadend","result","readAsDataURL","type","value","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3034aea6.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Button.scss';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faAngleUp, faAngleRight, faAngleDown, faAngleLeft } from '@fortawesome/free-solid-svg-icons'\n\nclass Button extends React.Component {\n    \n    constructor(props) {\n      super(props);\n\n      let icons = {\n        'top': faAngleUp,\n        'right': faAngleRight,\n        'bottom': faAngleDown,\n        'left': faAngleLeft\n      };\n\n      this.state = {\n        onClick: props.onClick,\n        icon: icons[props.icon]\n      }\n    }\n\n    render() {\n      return (\n        <button className={`button ${ this.props.className }`} onClick={this.state.onClick}>\n            <FontAwesomeIcon icon={this.state.icon} />\n        </button>\n      );\n    }\n\n}\n\nexport default Button;","import React from 'react';\nimport './ImageViewer.scss';\n\nimport Button from './Button';\n\nclass ImageViewer extends React.Component {\n    \n  constructor(props) {\n    super(props);\n\n    console.log(props.image);\n\n    this.state = {\n      image: props.image,\n      x: 0,\n      y: 0,\n      z: 0,\n      style: {}\n    }\n\n    this.flipUp = this.flipUp.bind(this);\n    this.flipRight = this.flipRight.bind(this);\n    this.flipDown = this.flipDown.bind(this);\n    this.flipLeft = this.flipLeft.bind(this);\n  }\n\n  buildStyle(x, y, z) {\n    let styles = {\n      transform: 'rotateX(' + x + 'deg) rotateY(' + y + 'deg) rotateZ(' + z + 'deg)'\n    };\n\n    return styles;\n  }\n\n  flipUp() {\n    let x = this.state.x - 180;\n\n    this.setState({\n      x: x,\n      style: this.buildStyle(x, this.state.y, this.state.z)\n    });\n  }\n\n  flipRight() {\n    let y = this.state.y + 180;\n\n    this.setState({\n      y: y,\n      style: this.buildStyle(this.state.x, y, this.state.z)\n    });\n  }\n\n  flipDown() {\n    let x = this.state.x + 180;\n\n    this.setState({\n      x: x,\n      style: this.buildStyle(x, this.state.y, this.state.z)\n    });\n  }\n\n  flipLeft() {\n    let y = this.state.y - 180;\n\n    this.setState({\n      y: y,\n      style: this.buildStyle(this.state.x, y, this.state.z)\n    });\n  }\n\n  renderButtons() {\n    let  buttons = null;\n\n    if (this.state.image) {\n      buttons = <div>\n        <Button className=\"image-viewer__button image-viewer__button--top\" icon=\"top\" onClick={this.flipUp} />\n        <Button className=\"image-viewer__button image-viewer__button--right\" icon=\"right\" onClick={this.flipRight} />\n        <Button className=\"image-viewer__button image-viewer__button--bottom\" icon=\"bottom\" onClick={this.flipDown} />\n        <Button className=\"image-viewer__button image-viewer__button--left\" icon=\"left\" onClick={this.flipLeft} />\n      </div>\n    }\n\n    return buttons;\n  }\n\n  render() {\n\n    let buttons = this.renderButtons();\n\n    return (\n      <div class=\"image-viewer\">\n        <img style={this.state.style} class=\"image-viewer__image\" src={this.state.image} />\n\n        { buttons ? buttons : '' }\n      </div>\n    );\n  }\n\n}\n\nexport default ImageViewer;","import React from 'react';\n\nimport './ImageFlipper.scss';\n\nimport ImageViewer from './ImageViewer';\n\nclass ImageFlipper extends React.Component {\n    \n  constructor() {\n    super();\n\n    this.state = { \n      image: []\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n \n  onChange(e) {\n    e.preventDefault();\n    \n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n      this.setState({\n        image: reader.result\n      });\n    }\n\n    reader.readAsDataURL(file);\n  }\n\n  render() {\n    return (\n      <div class=\"image-flipper\">\n        <input class=\"image-flipper__uploader\" type=\"file\" value={this.state.value} onChange={this.onChange} />\n\n        <ImageViewer image={this.state.image} key={this.state.image}/>\n      </div>\n    );\n  }\n\n}\n\nexport default ImageFlipper;","import React from 'react';\nimport './App.scss';\nimport ImageFlipper from './Components/ImageFlipper';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1 class=\"title\">Image Flipper</h1>\n      <p class=\"description\">Please upload an image and use the arrow keys to flip the image</p>\n      \n      <ImageFlipper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={'image-flipper'}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}